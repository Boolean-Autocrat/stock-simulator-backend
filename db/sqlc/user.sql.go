// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
  (full_name, email, picture) 
VALUES 
  ($1, $2, $3) 
ON CONFLICT (email) DO UPDATE
  SET full_name = excluded.full_name, picture = excluded.picture
RETURNING id, full_name, email, picture, balance
`

type CreateUserParams struct {
	FullName string `json:"fullName"`
	Email    string `json:"email"`
	Picture  string `json:"picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FullName, arg.Email, arg.Picture)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Picture,
		&i.Balance,
	)
	return i, err
}

const getLeaderboard = `-- name: GetLeaderboard :many
SELECT id, full_name, picture, balance FROM users ORDER BY balance DESC, full_name ASC LIMIT 10
`

type GetLeaderboardRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"fullName"`
	Picture  string    `json:"picture"`
	Balance  float32   `json:"balance"`
}

func (q *Queries) GetLeaderboard(ctx context.Context) ([]GetLeaderboardRow, error) {
	rows, err := q.db.QueryContext(ctx, getLeaderboard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderboardRow
	for rows.Next() {
		var i GetLeaderboardRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Picture,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT full_name, email, picture, balance FROM users WHERE id = $1
`

type GetUserRow struct {
	FullName string  `json:"fullName"`
	Email    string  `json:"email"`
	Picture  string  `json:"picture"`
	Balance  float32 `json:"balance"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.FullName,
		&i.Email,
		&i.Picture,
		&i.Balance,
	)
	return i, err
}

const getUserBalance = `-- name: GetUserBalance :one
SELECT balance FROM users WHERE id = $1
`

func (q *Queries) GetUserBalance(ctx context.Context, id uuid.UUID) (float32, error) {
	row := q.db.QueryRowContext(ctx, getUserBalance, id)
	var balance float32
	err := row.Scan(&balance)
	return balance, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, picture, balance FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Picture,
		&i.Balance,
	)
	return i, err
}

const getUserPosition = `-- name: GetUserPosition :one
SELECT id, full_name, picture, balance, position FROM (
  SELECT id, full_name, picture, balance, row_number() OVER (ORDER BY balance DESC) AS position FROM users
) AS users_with_position WHERE id = $1
`

type GetUserPositionRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"fullName"`
	Picture  string    `json:"picture"`
	Balance  float32   `json:"balance"`
	Position int64     `json:"position"`
}

func (q *Queries) GetUserPosition(ctx context.Context, id uuid.UUID) (GetUserPositionRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPosition, id)
	var i GetUserPositionRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Picture,
		&i.Balance,
		&i.Position,
	)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE users SET balance = balance + $1 WHERE id = $2
`

type UpdateBalanceParams struct {
	Balance float32   `json:"balance"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateBalance, arg.Balance, arg.ID)
	return err
}
