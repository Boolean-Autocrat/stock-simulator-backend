// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: stock.sql

package db

import (
	"context"
	"database/sql"
)

const createStock = `-- name: CreateStock :one
INSERT INTO stocks (symbol, price, is_crypto, is_stock) VALUES ($1, $2, $3, $4) RETURNING id, symbol, price, is_crypto, is_stock
`

type CreateStockParams struct {
	Symbol   sql.NullString `json:"symbol"`
	Price    sql.NullString `json:"price"`
	IsCrypto sql.NullBool   `json:"isCrypto"`
	IsStock  sql.NullBool   `json:"isStock"`
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, createStock,
		arg.Symbol,
		arg.Price,
		arg.IsCrypto,
		arg.IsStock,
	)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Price,
		&i.IsCrypto,
		&i.IsStock,
	)
	return i, err
}

const getStock = `-- name: GetStock :one
SELECT id, symbol, price, is_crypto, is_stock FROM stocks WHERE symbol = $1
`

func (q *Queries) GetStock(ctx context.Context, symbol sql.NullString) (Stock, error) {
	row := q.db.QueryRowContext(ctx, getStock, symbol)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Price,
		&i.IsCrypto,
		&i.IsStock,
	)
	return i, err
}

const getStocks = `-- name: GetStocks :many
SELECT id, symbol, price, is_crypto, is_stock FROM stocks WHERE is_crypto = $1 AND is_stock = $2
`

type GetStocksParams struct {
	IsCrypto sql.NullBool `json:"isCrypto"`
	IsStock  sql.NullBool `json:"isStock"`
}

func (q *Queries) GetStocks(ctx context.Context, arg GetStocksParams) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getStocks, arg.IsCrypto, arg.IsStock)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Price,
			&i.IsCrypto,
			&i.IsStock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStocksByName = `-- name: GetStocksByName :many
SELECT id, symbol, price, is_crypto, is_stock FROM stocks WHERE symbol LIKE $1
`

func (q *Queries) GetStocksByName(ctx context.Context, symbol sql.NullString) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getStocksByName, symbol)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Price,
			&i.IsCrypto,
			&i.IsStock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStocksBySymbol = `-- name: GetStocksBySymbol :many
SELECT id, symbol, price, is_crypto, is_stock FROM stocks WHERE symbol LIKE $1
`

func (q *Queries) GetStocksBySymbol(ctx context.Context, symbol sql.NullString) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getStocksBySymbol, symbol)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Price,
			&i.IsCrypto,
			&i.IsStock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
