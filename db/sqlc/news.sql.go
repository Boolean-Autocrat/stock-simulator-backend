// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: news.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addArticle = `-- name: AddArticle :one
INSERT INTO news (title, description, photo) VALUES ($1, $2, $3) RETURNING id, title, description, photo, likes, dislikes
`

type AddArticleParams struct {
	Title       string         `json:"title"`
	Description string         `json:"description"`
	Photo       sql.NullString `json:"photo"`
}

func (q *Queries) AddArticle(ctx context.Context, arg AddArticleParams) (News, error) {
	row := q.db.QueryRowContext(ctx, addArticle, arg.Title, arg.Description, arg.Photo)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Photo,
		&i.Likes,
		&i.Dislikes,
	)
	return i, err
}

const addArticleSentiment = `-- name: AddArticleSentiment :one
INSERT INTO news_sentiment (article_id, user_id, "like", "dislike") VALUES ($1, $2, $3, $4) RETURNING id, article_id, user_id, "like", dislike
`

type AddArticleSentimentParams struct {
	ArticleID uuid.UUID `json:"articleId"`
	UserID    uuid.UUID `json:"userId"`
	Like      bool      `json:"like"`
	Dislike   bool      `json:"dislike"`
}

func (q *Queries) AddArticleSentiment(ctx context.Context, arg AddArticleSentimentParams) (NewsSentiment, error) {
	row := q.db.QueryRowContext(ctx, addArticleSentiment,
		arg.ArticleID,
		arg.UserID,
		arg.Like,
		arg.Dislike,
	)
	var i NewsSentiment
	err := row.Scan(
		&i.ID,
		&i.ArticleID,
		&i.UserID,
		&i.Like,
		&i.Dislike,
	)
	return i, err
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, description, photo, likes, dislikes FROM news WHERE id = $1
`

func (q *Queries) GetArticle(ctx context.Context, id uuid.UUID) (News, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Photo,
		&i.Likes,
		&i.Dislikes,
	)
	return i, err
}

const getArticleSentiment = `-- name: GetArticleSentiment :many
SELECT id, article_id, user_id, "like", dislike FROM news_sentiment WHERE article_id = $1
`

func (q *Queries) GetArticleSentiment(ctx context.Context, articleID uuid.UUID) ([]NewsSentiment, error) {
	rows, err := q.db.QueryContext(ctx, getArticleSentiment, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NewsSentiment
	for rows.Next() {
		var i NewsSentiment
		if err := rows.Scan(
			&i.ID,
			&i.ArticleID,
			&i.UserID,
			&i.Like,
			&i.Dislike,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleSentimentByUser = `-- name: GetArticleSentimentByUser :one
SELECT id, article_id, user_id, "like", dislike FROM news_sentiment WHERE article_id = $1 AND user_id = $2
`

type GetArticleSentimentByUserParams struct {
	ArticleID uuid.UUID `json:"articleId"`
	UserID    uuid.UUID `json:"userId"`
}

func (q *Queries) GetArticleSentimentByUser(ctx context.Context, arg GetArticleSentimentByUserParams) (NewsSentiment, error) {
	row := q.db.QueryRowContext(ctx, getArticleSentimentByUser, arg.ArticleID, arg.UserID)
	var i NewsSentiment
	err := row.Scan(
		&i.ID,
		&i.ArticleID,
		&i.UserID,
		&i.Like,
		&i.Dislike,
	)
	return i, err
}

const getArticles = `-- name: GetArticles :many
SELECT id, title, description, photo, likes, dislikes FROM news
`

func (q *Queries) GetArticles(ctx context.Context) ([]News, error) {
	rows, err := q.db.QueryContext(ctx, getArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Photo,
			&i.Likes,
			&i.Dislikes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticleSentiment = `-- name: UpdateArticleSentiment :one
UPDATE news_sentiment SET "like" = $1,"dislike" = $2 WHERE article_id = $3 AND user_id = $4 RETURNING id, article_id, user_id, "like", dislike
`

type UpdateArticleSentimentParams struct {
	Like      bool      `json:"like"`
	Dislike   bool      `json:"dislike"`
	ArticleID uuid.UUID `json:"articleId"`
	UserID    uuid.UUID `json:"userId"`
}

func (q *Queries) UpdateArticleSentiment(ctx context.Context, arg UpdateArticleSentimentParams) (NewsSentiment, error) {
	row := q.db.QueryRowContext(ctx, updateArticleSentiment,
		arg.Like,
		arg.Dislike,
		arg.ArticleID,
		arg.UserID,
	)
	var i NewsSentiment
	err := row.Scan(
		&i.ID,
		&i.ArticleID,
		&i.UserID,
		&i.Like,
		&i.Dislike,
	)
	return i, err
}
