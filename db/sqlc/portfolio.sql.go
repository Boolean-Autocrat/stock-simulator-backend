// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: portfolio.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addStockToPortfolio = `-- name: AddStockToPortfolio :one
INSERT INTO portfolio (user_id, stock_id, purchase_price) VALUES ($1, $2, $3) RETURNING id, user_id, stock_id, purchase_price, purchased_at
`

type AddStockToPortfolioParams struct {
	UserID        uuid.NullUUID  `json:"userId"`
	StockID       uuid.NullUUID  `json:"stockId"`
	PurchasePrice sql.NullString `json:"purchasePrice"`
}

func (q *Queries) AddStockToPortfolio(ctx context.Context, arg AddStockToPortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, addStockToPortfolio, arg.UserID, arg.StockID, arg.PurchasePrice)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockID,
		&i.PurchasePrice,
		&i.PurchasedAt,
	)
	return i, err
}

const getPortfolio = `-- name: GetPortfolio :many
SELECT id, user_id, stock_id, purchase_price, purchased_at FROM portfolio WHERE user_id = $1
`

func (q *Queries) GetPortfolio(ctx context.Context, userID uuid.NullUUID) ([]Portfolio, error) {
	rows, err := q.db.QueryContext(ctx, getPortfolio, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Portfolio
	for rows.Next() {
		var i Portfolio
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StockID,
			&i.PurchasePrice,
			&i.PurchasedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPortfolioStock = `-- name: GetPortfolioStock :one
SELECT id, user_id, stock_id, purchase_price, purchased_at FROM portfolio WHERE user_id = $1 AND stock_id = $2
`

type GetPortfolioStockParams struct {
	UserID  uuid.NullUUID `json:"userId"`
	StockID uuid.NullUUID `json:"stockId"`
}

func (q *Queries) GetPortfolioStock(ctx context.Context, arg GetPortfolioStockParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, getPortfolioStock, arg.UserID, arg.StockID)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockID,
		&i.PurchasePrice,
		&i.PurchasedAt,
	)
	return i, err
}

const getPortfolioStocks = `-- name: GetPortfolioStocks :many
SELECT id, user_id, stock_id, purchase_price, purchased_at FROM portfolio WHERE user_id = $1 AND stock_id = $2
`

type GetPortfolioStocksParams struct {
	UserID  uuid.NullUUID `json:"userId"`
	StockID uuid.NullUUID `json:"stockId"`
}

func (q *Queries) GetPortfolioStocks(ctx context.Context, arg GetPortfolioStocksParams) ([]Portfolio, error) {
	rows, err := q.db.QueryContext(ctx, getPortfolioStocks, arg.UserID, arg.StockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Portfolio
	for rows.Next() {
		var i Portfolio
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StockID,
			&i.PurchasePrice,
			&i.PurchasedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeStockFromPortfolio = `-- name: RemoveStockFromPortfolio :exec
DELETE FROM portfolio WHERE user_id = $1 AND stock_id = $2
`

type RemoveStockFromPortfolioParams struct {
	UserID  uuid.NullUUID `json:"userId"`
	StockID uuid.NullUUID `json:"stockId"`
}

func (q *Queries) RemoveStockFromPortfolio(ctx context.Context, arg RemoveStockFromPortfolioParams) error {
	_, err := q.db.ExecContext(ctx, removeStockFromPortfolio, arg.UserID, arg.StockID)
	return err
}
