// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: market.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addBuyOrder = `-- name: AddBuyOrder :exec
INSERT INTO buy_orders ("id", "user", "stock", "price", "quantity") VALUES ($1, $2, $3, $4, $5)
`

type AddBuyOrderParams struct {
	ID       uuid.UUID `json:"id"`
	User     uuid.UUID `json:"user"`
	Stock    uuid.UUID `json:"stock"`
	Price    int32     `json:"price"`
	Quantity int32     `json:"quantity"`
}

func (q *Queries) AddBuyOrder(ctx context.Context, arg AddBuyOrderParams) error {
	_, err := q.db.ExecContext(ctx, addBuyOrder,
		arg.ID,
		arg.User,
		arg.Stock,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const addSellOrder = `-- name: AddSellOrder :exec
INSERT INTO sell_orders ("id", "user", "stock", "price", "quantity") VALUES ($1, $2, $3, $4, $5)
`

type AddSellOrderParams struct {
	ID       uuid.UUID `json:"id"`
	User     uuid.UUID `json:"user"`
	Stock    uuid.UUID `json:"stock"`
	Price    int32     `json:"price"`
	Quantity int32     `json:"quantity"`
}

func (q *Queries) AddSellOrder(ctx context.Context, arg AddSellOrderParams) error {
	_, err := q.db.ExecContext(ctx, addSellOrder,
		arg.ID,
		arg.User,
		arg.Stock,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const addTrade = `-- name: AddTrade :exec
INSERT INTO trades ("id", "buy_order", "sell_order", "price", "quantity") VALUES ($1, $2, $3, $4, $5)
`

type AddTradeParams struct {
	ID        uuid.UUID `json:"id"`
	BuyOrder  uuid.UUID `json:"buyOrder"`
	SellOrder uuid.UUID `json:"sellOrder"`
	Price     int32     `json:"price"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) AddTrade(ctx context.Context, arg AddTradeParams) error {
	_, err := q.db.ExecContext(ctx, addTrade,
		arg.ID,
		arg.BuyOrder,
		arg.SellOrder,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const getClosedBuyOrders = `-- name: GetClosedBuyOrders :many
SELECT id, "user", stock, price, quantity, fulfilled FROM buy_orders WHERE "user" = $1 AND "fulfilled" = "quantity"
`

func (q *Queries) GetClosedBuyOrders(ctx context.Context, user uuid.UUID) ([]BuyOrder, error) {
	rows, err := q.db.QueryContext(ctx, getClosedBuyOrders, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BuyOrder
	for rows.Next() {
		var i BuyOrder
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Stock,
			&i.Price,
			&i.Quantity,
			&i.Fulfilled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClosedSellOrders = `-- name: GetClosedSellOrders :many
SELECT id, "user", stock, price, quantity, fulfilled FROM sell_orders WHERE "user" = $1 AND "fulfilled" = "quantity"
`

func (q *Queries) GetClosedSellOrders(ctx context.Context, user uuid.UUID) ([]SellOrder, error) {
	rows, err := q.db.QueryContext(ctx, getClosedSellOrders, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SellOrder
	for rows.Next() {
		var i SellOrder
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Stock,
			&i.Price,
			&i.Quantity,
			&i.Fulfilled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenBuyOrders = `-- name: GetOpenBuyOrders :many
SELECT id, "user", stock, price, quantity, fulfilled FROM buy_orders WHERE "user" = $1 AND "fulfilled" < "quantity"
`

func (q *Queries) GetOpenBuyOrders(ctx context.Context, user uuid.UUID) ([]BuyOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOpenBuyOrders, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BuyOrder
	for rows.Next() {
		var i BuyOrder
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Stock,
			&i.Price,
			&i.Quantity,
			&i.Fulfilled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenSellOrders = `-- name: GetOpenSellOrders :many
SELECT id, "user", stock, price, quantity, fulfilled FROM sell_orders WHERE "user" = $1 AND "fulfilled" < "quantity"
`

func (q *Queries) GetOpenSellOrders(ctx context.Context, user uuid.UUID) ([]SellOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOpenSellOrders, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SellOrder
	for rows.Next() {
		var i SellOrder
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Stock,
			&i.Price,
			&i.Quantity,
			&i.Fulfilled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBuyOrders = `-- name: ListBuyOrders :many
SELECT id, "user", stock, price, quantity, fulfilled FROM buy_orders WHERE "stock" = $1 AND "fulfilled" < "quantity" ORDER BY "price" DESC
`

func (q *Queries) ListBuyOrders(ctx context.Context, stock uuid.UUID) ([]BuyOrder, error) {
	rows, err := q.db.QueryContext(ctx, listBuyOrders, stock)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BuyOrder
	for rows.Next() {
		var i BuyOrder
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Stock,
			&i.Price,
			&i.Quantity,
			&i.Fulfilled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSellOrders = `-- name: ListSellOrders :many
SELECT id, "user", stock, price, quantity, fulfilled FROM sell_orders WHERE "stock" = $1 AND "fulfilled" < "quantity" ORDER BY "price" ASC
`

func (q *Queries) ListSellOrders(ctx context.Context, stock uuid.UUID) ([]SellOrder, error) {
	rows, err := q.db.QueryContext(ctx, listSellOrders, stock)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SellOrder
	for rows.Next() {
		var i SellOrder
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Stock,
			&i.Price,
			&i.Quantity,
			&i.Fulfilled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuyOrder = `-- name: UpdateBuyOrder :exec
UPDATE buy_orders SET "fulfilled" = "fulfilled" + $1 WHERE "id" = $2
`

type UpdateBuyOrderParams struct {
	Fulfilled int32     `json:"fulfilled"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateBuyOrder(ctx context.Context, arg UpdateBuyOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateBuyOrder, arg.Fulfilled, arg.ID)
	return err
}

const updateSellOrder = `-- name: UpdateSellOrder :exec
UPDATE sell_orders SET "fulfilled" = "fulfilled" + $1 WHERE "id" = $2
`

type UpdateSellOrderParams struct {
	Fulfilled int32     `json:"fulfilled"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateSellOrder(ctx context.Context, arg UpdateSellOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateSellOrder, arg.Fulfilled, arg.ID)
	return err
}
