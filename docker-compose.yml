version: "3.9"
services:
  rabbitmq:
    restart: always
    image: "rabbitmq:3.12.13-alpine"
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
    volumes:
      - ./rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 30s
      retries: 3

  postgres:
    image: postgres:16-alpine3.19
    restart: always
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sms_db
      - POSTGRES_LOGGING_COLLECTOR=on
      - POSTGRES_LOG_STATEMENT=all
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./postgres-log:/var/lib/postgresql/data/log
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 30s
      timeout: 30s
      retries: 3
    command:
      [
        "postgres",
        "-c",
        "log_statement=all",
        "-c",
        "logging_collector=on",
        "-c",
        "log_directory=/var/lib/postgresql/data/log",
        "-c",
        "log_filename=postgresql.log",
      ]
  api:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DB_SOURCE=postgresql://postgres:postgres@postgres:5432/sms_db?sslmode=disable
    depends_on:
      - rabbitmq
      - postgres
    entrypoint: ["./wait-for-it.sh", "postgres:5432", "--", "/app/start.sh"]
    command: ["/app/main"]

volumes:
  postgres-data:
  postgres-log:
  rabbitmq-data:
